/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'luke' at '12/20/16 10:46 PM' with Gradle 3.0
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.0/userguide/tutorial_java_projects.html
 */

plugins {
    id "com.jfrog.bintray" version "1.7.3"
    id "com.jfrog.artifactory" version "4.5.1"
}
apply plugin: 'maven-publish'
apply plugin: 'signing'

dependencies {
    compile 'org.slf4j:slf4j-api:1.7.21'
    compile 'org.apache.sshd:sshd-core:1.3.0'
    testCompile 'junit:junit:4.12'
}

ext.javashellVersion = '1.3.0-SNAPSHOT'
ext.isReleaseVersion = !javashellVersion.endsWith("SNAPSHOT")

// Use bintrayUpload task to upload to bintray
// ./gradlew -PBINTRAY_KEY=xxxx bintrayUpload
// Alternatively you can place the following in gradle.properties:
// BINTRAY_KEY = xxxx
// Do not but quotes around the key value or it will fail on some platforms
bintray {
    user = 'lukewink'
    key = project.hasProperty('BINTRAY_KEY') ? project.property('BINTRAY_KEY') : System.getenv('BINTRAY_KEY')
    publications = ['MyPublication']
    pkg {
        repo = 'javashell'
        name = 'javashell'
        userOrg = 'lukewink'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/lukewink/javashell.git'

        version {
            name = javashellVersion
            desc = 'javashell release'
            released = new Date()
            vcsTag = javashellVersion
        }
    }
}

def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }
    developers {
        developer {
            id "lukewink"
            name "Luke Winkenbach"
            email "lukewink@gmail.com"
        }
    }
    scm {
        url "https://github.com/lukewink/javashell.git"
    }
}

publishing {
    publications {
        MyPublication(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            groupId 'com.lwink'
            artifactId 'javashell'
            version javashellVersion
            
            project.tasks.withType(Sign) {
                signatures.all {
                    onlyIf { isReleaseVersion }
                    def type = it.type
                    if (it.file.name.endsWith('.tar.gz.asc')) {
                        type = 'tar.gz.asc'
                    }
                    else if (it.type.equals('xml.asc')) {
                        type = 'pom.asc'
                    }
                    artifact source: it.file, classifier: it.classifier ?: null, extension: type
                }
            }
            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'A SSH shell that can be embedded in a java application')
                root.appendNode('name', 'javashell')
                root.appendNode('url', 'https://github.com/lukewink/javashell')
                root.children().last() + pomConfig
            }
        }
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

// Use artifactoryPublish task to upload snapshots to oss.jfrog.org
// ./gradlew -PBINTRAY_KEY=xxxx artifactoryPublish
artifactory {
    contextUrl = 'http://oss.jfrog.org/artifactory'
    publish {
        repository {
            repoKey = 'oss-snapshot-local'
            username = 'lukewink'
            password = project.hasProperty('BINTRAY_KEY') ? project.getProperty('BINTRAY_KEY') : System.getenv('BINTRAY_KEY')
        }
        defaults {
            publications('MyPublication')
        }
    }
    resolve {
        repository {
            repoKey = 'libs-release'
        }
    }
    clientConfig.setIncludeEnvVars(true)
}

signing {
    required { gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

// See https://stackoverflow.com/questions/16560235/how-to-sign-maven-publications-with-gradle
task signPom(type: Sign) {
    sign project.file('build/publications/MyPublication/pom-default.xml')
    outputs.upToDateWhen { false }
}

/*model {
      tasks.signPom {
        dependsOn tasks.generatePomFileForMavenPublication
      }
}*/
